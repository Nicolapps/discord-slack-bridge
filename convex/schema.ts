import { defineSchema, defineTable } from "convex/schema";
import { s } from "convex/schema";

export default defineSchema({
  channels: defineTable({
    availableTags: s.array(
      s.object({
        emoji: s.null(),
        id: s.string(),
        moderated: s.boolean(),
        name: s.string(),
      })
    ),
    createdTimestamp: s.number(),
    defaultAutoArchiveDuration: s.null(),
    defaultForumLayout: s.number(),
    defaultReactionEmoji: s.object({ id: s.null(), name: s.string() }),
    defaultSortOrder: s.null(),
    defaultThreadRateLimitPerUser: s.null(),
    flags: s.number(),
    guild: s.string(),
    guildId: s.string(),
    id: s.string(),
    name: s.string(),
    nsfw: s.boolean(),
    parentId: s.string(),
    permissionOverwrites: s.array(s.string()),
    rateLimitPerUser: s.number(),
    rawPosition: s.number(),
    topic: s.string(),
    type: s.number(),
    slackChannelId: s.optional(s.string()),
  }).index("id", ["id"]),
  messages: defineTable({
    activity: s.null(),
    applicationId: s.null(),
    attachments: s.map(s.string(), s.any()),
    authorId: s.id("users"),
    channelId: s.id("channels"),
    cleanContent: s.string(),
    components: s.array(s.any()),
    content: s.string(),
    createdTimestamp: s.number(),
    editedTimestamp: s.null(),
    embeds: s.array(s.any()),
    flags: s.number(),
    guildId: s.string(),
    id: s.string(),
    interaction: s.null(),
    mentions: s.object({
      channels: s.array(s.string()),
      crosspostedChannels: s.array(s.string()),
      everyone: s.boolean(),
      members: s.array(s.string()),
      repliedUser: s.null(),
      roles: s.array(s.string()),
      users: s.array(s.string()),
    }),
    nonce: s.string(),
    pinned: s.boolean(),
    position: s.number(),
    reference: s.null(),
    roleSubscriptionData: s.null(),
    stickers: s.map(s.string(), s.any()),
    system: s.boolean(),
    threadId: s.optional(s.id("threads")),
    tts: s.boolean(),
    type: s.number(),
    webhookId: s.null(),
    slackTs: s.optional(s.string()),
  }).index("id", ["id"]),
  threads: defineTable({
    appliedTags: s.array(s.string()),
    archiveTimestamp: s.number(),
    archived: s.boolean(),
    autoArchiveDuration: s.number(),
    channelId: s.id("channels"),
    createdTimestamp: s.number(),
    flags: s.number(),
    guild: s.string(),
    guildId: s.string(),
    id: s.string(),
    invitable: s.null(),
    lastMessageId: s.string(),
    lastPinTimestamp: s.null(),
    locked: s.boolean(),
    memberCount: s.number(),
    messageCount: s.number(),
    name: s.string(),
    ownerId: s.string(),
    parentId: s.string(),
    rateLimitPerUser: s.number(),
    totalMessageSent: s.number(),
    type: s.number(),
    slackThreadTs: s.optional(s.string()),
  }).index("id", ["id"]),
  users: defineTable({
    avatar: s.string(),
    avatarURL: s.string(),
    bot: s.boolean(),
    createdTimestamp: s.number(),
    defaultAvatarURL: s.string(),
    discriminator: s.string(),
    displayAvatarURL: s.string(),
    displayName: s.string(),
    flags: s.number(),
    guildId: s.string(),
    id: s.string(),
    joinedTimestamp: s.number(),
    memberId: s.string(),
    nickname: s.string(),
    pending: s.boolean(),
    roles: s.array(s.string()),
    system: s.boolean(),
    tag: s.string(),
    userId: s.string(),
    username: s.string(),
    slackUserId: s.optional(s.string()),
  }).index("id", ["id"]),
});
