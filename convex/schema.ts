import { defineSchema, defineTable, s } from "convex/schema";

export default defineSchema({
  channels: defineTable({
    availableTags: s.optional(
      s.array(
        s.object({
          emoji: s.union(
            s.null(),
            s.object({ id: s.null(), name: s.string() })
          ),
          id: s.string(),
          moderated: s.boolean(),
          name: s.string(),
        })
      )
    ),
    createdTimestamp: s.number(),
    defaultAutoArchiveDuration: s.optional(s.null()),
    defaultForumLayout: s.optional(s.number()),
    defaultReactionEmoji: s.optional(
      s.object({ id: s.null(), name: s.string() })
    ),
    defaultSortOrder: s.optional(s.null()),
    defaultThreadRateLimitPerUser: s.optional(s.null()),
    flags: s.number(),
    guild: s.string(),
    guildId: s.string(),
    id: s.string(),
    lastMessageId: s.optional(s.string()),
    name: s.string(),
    nsfw: s.boolean(),
    parentId: s.string(),
    permissionOverwrites: s.array(s.string()),
    rateLimitPerUser: s.number(),
    rawPosition: s.number(),
    slackChannelId: s.optional(s.string()),
    topic: s.string(),
    type: s.number(),
  }).index("id", ["id"]),
  messages: defineTable({
    activity: s.null(),
    applicationId: s.null(),
    attachments: s.array(s.string()),
    authorId: s.id("users"),
    channelId: s.id("channels"),
    cleanContent: s.string(),
    components: s.array(s.any()),
    content: s.string(),
    createdTimestamp: s.number(),
    deleted: s.optional(s.boolean()),
    editedTimestamp: s.union(s.null(), s.number()),
    embeds: s.array(
      s.object({
        color: s.optional(s.number()),
        description: s.string(),
        provider: s.optional(s.object({ name: s.string() })),
        thumbnail: s.optional(
          s.object({
            height: s.number(),
            proxy_url: s.string(),
            url: s.string(),
            width: s.number(),
          })
        ),
        title: s.string(),
        type: s.string(),
        url: s.string(),
      })
    ),
    flags: s.number(),
    groupActivityApplicationId: s.null(),
    guildId: s.string(),
    id: s.string(),
    interaction: s.null(),
    mentions: s.object({
      channels: s.array(s.string()),
      crosspostedChannels: s.array(s.string()),
      everyone: s.boolean(),
      members: s.array(s.string()),
      repliedUser: s.union(s.null(), s.string()),
      roles: s.array(s.any()),
      users: s.array(s.string()),
    }),
    nonce: s.union(s.null(), s.string()),
    pinned: s.boolean(),
    position: s.union(s.null(), s.number()),
    reference: s.union(
      s.null(),
      s.object({
        channelId: s.string(),
        guildId: s.string(),
        messageId: s.string(),
      })
    ),
    roleSubscriptionData: s.null(),
    slackTs: s.optional(s.string()),
    stickers: s.array(s.any()),
    system: s.boolean(),
    threadId: s.optional(s.id("threads")),
    tts: s.boolean(),
    type: s.number(),
    webhookId: s.null(),
  }).index("id", ["id"]),
  threads: defineTable({
    appliedTags: s.array(s.string()),
    archiveTimestamp: s.number(),
    archived: s.boolean(),
    autoArchiveDuration: s.number(),
    channelId: s.id("channels"),
    createdTimestamp: s.number(),
    flags: s.number(),
    guild: s.string(),
    guildId: s.string(),
    id: s.string(),
    invitable: s.null(),
    lastMessageId: s.string(),
    lastPinTimestamp: s.null(),
    locked: s.boolean(),
    memberCount: s.number(),
    messageCount: s.number(),
    name: s.string(),
    ownerId: s.string(),
    parentId: s.string(),
    rateLimitPerUser: s.number(),
    slackThreadTs: s.optional(s.string()),
    totalMessageSent: s.number(),
    type: s.number(),
  }).index("id", ["id"]),
  users: defineTable({
    avatar: s.union(s.null(), s.string()),
    avatarURL: s.union(s.null(), s.string()),
    bot: s.boolean(),
    createdTimestamp: s.number(),
    defaultAvatarURL: s.string(),
    discriminator: s.string(),
    displayAvatarURL: s.string(),
    displayName: s.string(),
    flags: s.number(),
    guildId: s.string(),
    id: s.string(),
    joinedTimestamp: s.number(),
    memberId: s.string(),
    nickname: s.union(s.null(), s.string()),
    pending: s.boolean(),
    roles: s.array(s.string()),
    slackUserId: s.optional(s.string()),
    system: s.boolean(),
    tag: s.string(),
    userId: s.string(),
    username: s.string(),
  }).index("id", ["id"]),
});
